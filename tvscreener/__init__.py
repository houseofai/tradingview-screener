import json
from enum import Enum

import pandas as pd
import requests


class TimeInterval(Enum):
    ONE_MINUTE = "update_mode|1"
    FIVE_MINUTES = "update_mode|5"
    FIFTEEN_MINUTES = "update_mode|15"
    THIRTY_MINUTES = "update_mode|30"
    SIXTY_MINUTES = "update_mode|60"
    TWO_HOURS = "update_mode|120"
    FOUR_HOURS = "update_mode|240"
    ONE_DAY = "update_mode|1D"
    ONE_WEEK = "update_mode|1W"


main_columns = [
    # "logoid",
    "name",
    "description",
    "type", "subtype",
    "pricescale",
    "minmov",
    "fractional",
    "minmove2",
    "currency",
    "fundamental_currency_code"
]


class FilterOperation(Enum):
    BELOW = "less"
    BELOW_OR_EQUAL = "eless"
    ABOVE = "greater"
    ABOVE_OR_EQUAL = "egreater"
    EQUAL = "equal"
    IN_RANGE = "in_range"
    NOT_EQUAL = "nequal"


def clean_columns(columns):
    to_remove = ['change.60',
                 'change_abs.60',
                 'change.1',
                 'change_abs.1',
                 'change.1M',
                 'change_abs.1M',
                 'change.1W',
                 'change_abs.1W',
                 'change.240',
                 'change_abs.240',
                 'change.5',
                 'change_abs.5',
                 'change.15',
                 'change_abs.15',
                 'change_from_open',
                 'change_from_open_abs',
                 'candlestick',
                 'relative_volume_intraday.5']

    columns = [e for e in columns if e not in to_remove]
    return list(dict.fromkeys(columns))


def get_url(subtype):
    return f"https://scanner.tradingview.com/{subtype}/scan"


class Screener:
    default_market = ["america"]

    def __init__(self, subtype):
        self.sort = None
        self.url = get_url(subtype)
        self.filters = []
        self.options = {}
        self.markets = []
        self.symbols = None
        self.market_columns = None

        self.range = None

        self.columns = main_columns.copy()
        self.set_range()
        # self.add_filter("type", "equal", subtype)
        self.add_option("lang", "en")

    def add_filter(self, filter_, operation: FilterOperation = None, values=None):

        # if values is a list then the operation is 'in_range'
        if isinstance(values, list):
            filter_val = {"left": filter_, "operation": FilterOperation.IN_RANGE.value, "right": values}
        elif isinstance(values, bool):
            filter_val = {"left": filter_, "operation": FilterOperation.EQUAL.value, "right": values}
        else:
            filter_val = {"left": filter_, "operation": operation.value, "right": values}
        self.filters.append(filter_val)

    def add_option(self, key, value):
        self.options[key] = value

    def set_markets(self, *market):
        """
        Set the markets to be scanned
        :param market: list of markets
        :return: None
        """
        self.markets.extend(market)

    def set_range(self, from_range=0, to_range=150):
        self.range = [from_range, to_range]

    # def set_symbols(self, symbols):
    #    self.symbols = symbols

    def sort_by(self, sort_by, order="desc"):
        self.sort = {"sortBy": sort_by, "sortOrder": order}

    def _build_payload(self):
        payload = {"filter": self.filters if self.filters else [], "options": self.options,
                   "symbols": self.symbols if self.symbols else {"query": {"types": []}, "tickers": []},
                   "markets": self.markets if self.markets else self.default_market, "sort": self.sort,
                   "range": self.range}

        return payload

    def get(self, time_interval=TimeInterval.ONE_DAY, print_request=False):

        # Time Interval
        self.columns.append(time_interval.value)

        payload = self._build_payload()
        payload["columns"] = clean_columns(self.columns)

        payload_json = json.dumps(payload)
        if print_request:
            print(f"Request: {self.url}")
            print("Payload:")
            print(json.dumps(payload, indent=4))

        res = requests.post(self.url, data=payload_json)
        if res.status_code == 200:
            res_data = [d["d"] for d in res.json()['data']]
            return pd.DataFrame(res_data, columns=payload["columns"])
        else:
            print(f"Error: {res.status_code}")
            print(res.text)
            return None


class StockScreener(Screener):
    def __init__(self):
        super().__init__("global")
        self.columns.extend(data['columns_stocks'])
        self.sort_by("market_cap_basic", "desc")


class ForexScreener(Screener):
    def __init__(self):
        super().__init__("forex")
        self.columns.extend(data['columns_forex'])


class CryptoScreener(Screener):
    def __init__(self):
        super().__init__("crypto")
        self.columns.extend(data['columns_crypto'])


data = {
    "markets": [
        "america",
        "uk",
        "india",
        "spain",
        "russia",
        "australia",
        "brazil",
        "japan",
        "newzealand",
        "turkey",
        "switzerland",
        "hongkong",
        "taiwan",
        "netherlands",
        "belgium",
        "portugal",
        "france",
        "mexico",
        "canada",
        "colombia",
        "uae",
        "nigeria",
        "singapore",
        "germany",
        "pakistan",
        "peru",
        "poland",
        "italy",
        "argentina",
        "israel",
        "egypt",
        "srilanka",
        "serbia",
        "chile",
        "china",
        "malaysia",
        "morocco",
        "ksa",
        "bahrain",
        "qatar",
        "indonesia",
        "finland",
        "iceland",
        "denmark",
        "romania",
        "hungary",
        "sweden",
        "slovakia",
        "lithuania",
        "luxembourg",
        "estonia",
        "latvia",
        "vietnam",
        "rsa",
        "thailand",
        "tunisia",
        "korea",
        "kenya",
        "kuwait",
        "norway",
        "philippines",
        "greece",
        "venezuela",
        "cyprus",
        "bangladesh"

    ],
    'columns_stocks': ['earnings_per_share_basic_ttm',
                       'change',
                       'change_abs',
                       'market_cap_basic',
                       'number_of_employees',
                       'close',
                       'price_earnings_ttm',
                       'sector',
                       'Recommend.All',
                       'volume',
                       'Value.Traded',
                       'High.1M',
                       'Low.1M',
                       'beta_1_year',
                       'High.3M',
                       'Low.3M',
                       'Perf.3M',
                       'Perf.5Y',
                       'High.6M',
                       'Low.6M',
                       'Perf.6M',
                       'price_52_week_high',
                       'price_52_week_low',
                       'High.All',
                       'Low.All',
                       'Perf.All',
                       'Aroon.Down',
                       'Aroon.Up',
                       'ADR',
                       'ADX',
                       'ATR',
                       'average_volume_10d_calc',
                       'average_volume_30d_calc',
                       'average_volume_60d_calc',
                       'average_volume_90d_calc',
                       'AO',
                       'basic_eps_net_income',
                       'BB.lower',
                       'BB.upper',
                       'BBPower',
                       'cash_n_short_term_invest_fy',
                       'cash_n_short_term_invest_fq',
                       'cash_n_equivalents_fy',
                       'cash_n_equivalents_fq',
                       'ChaikinMoneyFlow',
                       'change.60',
                       'change_abs.60',
                       'change.1',
                       'change_abs.1',
                       'change.1M',
                       'change_abs.1M',
                       'change.1W',
                       'change_abs.1W',
                       'change.240',
                       'change_abs.240',
                       'change.5',
                       'change_abs.5',
                       'change.15',
                       'change_abs.15',
                       'change_from_open',
                       'change_from_open_abs',
                       'CCI20',
                       'country',
                       'current_ratio',
                       'debt_to_equity',
                       'dividends_paid',
                       'dps_common_stock_prim_issue_yoy_growth_fy',
                       'dps_common_stock_prim_issue_fy',
                       'dividends_per_share_fq',
                       'dividend_yield_recent',
                       'DonchCh20.Lower',
                       'DonchCh20.Upper',
                       'ebitda_yoy_growth_fy',
                       'ebitda_qoq_growth_fq',
                       'ebitda_yoy_growth_fq',
                       'ebitda',
                       'ebitda_yoy_growth_ttm',
                       'enterprise_value_ebitda_ttm',
                       'enterprise_value_fq',
                       'earnings_per_share_diluted_yoy_growth_fy',
                       'last_annual_eps',
                       'earnings_per_share_fq',
                       'earnings_per_share_diluted_qoq_growth_fq',
                       'earnings_per_share_diluted_yoy_growth_fq',
                       'earnings_per_share_diluted_ttm',
                       'earnings_per_share_diluted_yoy_growth_ttm',
                       'earnings_per_share_forecast_next_fq',
                       'exchange',
                       'EMA5',
                       'EMA10',
                       'EMA20',
                       'EMA30',
                       'EMA50',
                       'EMA100',
                       'EMA200',
                       'free_cash_flow_yoy_growth_fy',
                       'free_cash_flow_margin_fy',
                       'free_cash_flow_margin_ttm',
                       'free_cash_flow_qoq_growth_fq',
                       'free_cash_flow_yoy_growth_fq',
                       'free_cash_flow_yoy_growth_ttm',
                       'gap',
                       'goodwill',
                       'gross_profit_margin_fy',
                       'gross_margin',
                       'gross_profit_yoy_growth_fy',
                       'gross_profit',
                       'gross_profit_fq',
                       'gross_profit_qoq_growth_fq',
                       'gross_profit_yoy_growth_fq',
                       'gross_profit_yoy_growth_ttm',
                       'high',
                       'HullMA9',
                       'Ichimoku.BLine',
                       'Ichimoku.CLine',
                       'Ichimoku.Lead1',
                       'Ichimoku.Lead2',
                       'industry',
                       'KltChnl.lower',
                       'KltChnl.upper',
                       'last_annual_revenue',
                       'low',
                       'MACD.macd',
                       'MACD.signal',
                       'Mom',
                       'MoneyFlow',
                       'Perf.1M',
                       'Recommend.MA',
                       'ADX-DI',
                       'net_debt',
                       'net_income_yoy_growth_fy',
                       'net_income',
                       'net_income_qoq_growth_fq',
                       'net_income_yoy_growth_fq',
                       'net_income_yoy_growth_ttm',
                       'net_income_bef_disc_oper_margin_fy',
                       'after_tax_margin',
                       'number_of_shareholders',
                       'open',
                       'oper_income_margin_fy',
                       'operating_margin',
                       'Recommend.Other',
                       'P.SAR',
                       'candlestick',
                       'Pivot.M.Camarilla.Middle',
                       'Pivot.M.Camarilla.R1',
                       'Pivot.M.Camarilla.R2',
                       'Pivot.M.Camarilla.R3',
                       'Pivot.M.Camarilla.S1',
                       'Pivot.M.Camarilla.S2',
                       'Pivot.M.Camarilla.S3',
                       'Pivot.M.Classic.Middle',
                       'Pivot.M.Classic.R1',
                       'Pivot.M.Classic.R2',
                       'Pivot.M.Classic.R3',
                       'Pivot.M.Classic.S1',
                       'Pivot.M.Classic.S2',
                       'Pivot.M.Classic.S3',
                       'Pivot.M.Demark.Middle',
                       'Pivot.M.Demark.R1',
                       'Pivot.M.Demark.S1',
                       'Pivot.M.Fibonacci.Middle',
                       'Pivot.M.Fibonacci.R1',
                       'Pivot.M.Fibonacci.R2',
                       'Pivot.M.Fibonacci.R3',
                       'Pivot.M.Fibonacci.S1',
                       'Pivot.M.Fibonacci.S2',
                       'Pivot.M.Fibonacci.S3',
                       'Pivot.M.Woodie.Middle',
                       'Pivot.M.Woodie.R1',
                       'Pivot.M.Woodie.R2',
                       'Pivot.M.Woodie.R3',
                       'Pivot.M.Woodie.S1',
                       'Pivot.M.Woodie.S2',
                       'Pivot.M.Woodie.S3',
                       'ADX+DI',
                       'postmarket_change',
                       'postmarket_change_abs',
                       'postmarket_close',
                       'postmarket_high',
                       'postmarket_low',
                       'postmarket_open',
                       'postmarket_volume',
                       'premarket_change',
                       'premarket_change_abs',
                       'premarket_change_from_open',
                       'premarket_change_from_open_abs',
                       'premarket_close',
                       'premarket_gap',
                       'premarket_high',
                       'premarket_low',
                       'premarket_open',
                       'premarket_volume',
                       'pre_tax_margin',
                       'price_book_ratio',
                       'price_book_fq',
                       'price_free_cash_flow_ttm',
                       'price_revenue_ttm',
                       'price_sales_ratio',
                       'quick_ratio',
                       'ROC',
                       'earnings_release_date',
                       'RSI7',
                       'RSI',
                       'relative_volume_10d_calc',
                       'relative_volume_intraday.5',
                       'research_and_dev_ratio_fy',
                       'research_and_dev_ratio_ttm',
                       'return_on_assets',
                       'return_on_equity',
                       'return_on_invested_capital',
                       'total_revenue_yoy_growth_fy',
                       'revenue_per_employee',
                       'total_revenue_qoq_growth_fq',
                       'total_revenue_yoy_growth_fq',
                       'total_revenue_yoy_growth_ttm',
                       'sell_gen_admin_exp_other_ratio_fy',
                       'sell_gen_admin_exp_other_ratio_ttm',
                       'float_shares_outstanding',
                       'SMA5',
                       'SMA10',
                       'SMA20',
                       'SMA30',
                       'SMA50',
                       'SMA100',
                       'SMA200',
                       'Stoch.D',
                       'Stoch.K',
                       'Stoch.RSI.K',
                       'Stoch.RSI.D',
                       'submarket',
                       'total_assets_yoy_growth_fy',
                       'total_assets',
                       'total_assets_qoq_growth_fq',
                       'total_assets_yoy_growth_fq',
                       'total_current_assets',
                       'total_debt_yoy_growth_fy',
                       'total_debt',
                       'total_debt_qoq_growth_fq',
                       'total_debt_yoy_growth_fq',
                       'total_liabilities_fy',
                       'total_liabilities_fq',
                       'total_revenue',
                       'total_shares_outstanding_fundamental',
                       'UO',
                       'earnings_release_next_date',
                       'Volatility.D',
                       'Volatility.M',
                       'Volatility.W',
                       'VWAP',
                       'VWMA',
                       'Perf.W',
                       'W.R',
                       'Perf.Y',
                       'Perf.YTD'],

    'columns_crypto': ['BB.lower',
                       'BB.upper',
                       'close',
                       'Recommend.MA',
                       'SMA20',
                       'SMA50',
                       'SMA200',
                       'Aroon.Down',
                       'Aroon.Up',
                       'low',
                       'DonchCh20.Lower',
                       'DonchCh20.Upper',
                       'market_cap_calc',
                       'market_cap_diluted_calc',
                       'CCI20',
                       'Low.All',
                       'ask',
                       'gap',
                       'Recommend.Other',
                       'W.R',
                       'ADR',
                       'ATR',
                       'high',
                       'Ichimoku.Lead1',
                       'Ichimoku.Lead2',
                       'ADX-DI',
                       'ADX+DI',
                       'RSI7',
                       'RSI',
                       'ADX',
                       'KltChnl.lower',
                       'KltChnl.upper',
                       'Ichimoku.BLine',
                       'Ichimoku.CLine',
                       'AO',
                       'exchange',
                       'Mom',
                       'EMA5',
                       'EMA10',
                       'EMA20',
                       'EMA30',
                       'EMA50',
                       'EMA100',
                       'EMA200',
                       'HullMA9',
                       'VWMA',
                       'SMA5',
                       'SMA10',
                       'SMA30',
                       'SMA100',
                       'MACD.macd',
                       'Recommend.All',
                       'bid',
                       'UO',
                       'open',
                       'P.SAR',
                       'Perf.Y',
                       'Perf.1M',
                       'Perf.3M',
                       'Perf.6M',
                       'Perf.W',
                       'Perf.YTD',
                       'total_shares_outstanding',
                       'Pivot.M.Camarilla.Middle',
                       'Pivot.M.Camarilla.R1',
                       'Pivot.M.Camarilla.R2',
                       'Pivot.M.Camarilla.R3',
                       'Pivot.M.Camarilla.S1',
                       'Pivot.M.Camarilla.S2',
                       'Pivot.M.Camarilla.S3',
                       'Pivot.M.Classic.Middle',
                       'Pivot.M.Classic.R1',
                       'Pivot.M.Classic.R2',
                       'Pivot.M.Classic.R3',
                       'Pivot.M.Classic.S1',
                       'Pivot.M.Classic.S2',
                       'Pivot.M.Classic.S3',
                       'Pivot.M.Demark.Middle',
                       'Pivot.M.Demark.R1',
                       'Pivot.M.Demark.S1',
                       'Pivot.M.Fibonacci.Middle',
                       'Pivot.M.Fibonacci.R1',
                       'Pivot.M.Fibonacci.R2',
                       'Pivot.M.Fibonacci.R3',
                       'Pivot.M.Fibonacci.S1',
                       'Pivot.M.Fibonacci.S2',
                       'Pivot.M.Fibonacci.S3',
                       'Pivot.M.Woodie.Middle',
                       'Pivot.M.Woodie.R1',
                       'Pivot.M.Woodie.R2',
                       'Pivot.M.Woodie.R3',
                       'Pivot.M.Woodie.S1',
                       'Pivot.M.Woodie.S2',
                       'Pivot.M.Woodie.S3',
                       'Low.6M',
                       'price_52_week_low',
                       'Low.1M',
                       'Low.3M',
                       'High.6M',
                       'price_52_week_high',
                       'High.1M',
                       'High.3M',
                       'VWAP',
                       'BBPower',
                       'Stoch.RSI.D',
                       'Stoch.RSI.K',
                       'MACD.signal',
                       'High.All',
                       'Stoch.D',
                       'Stoch.K',
                       'ROC',
                       'total_shares_diluted',
                       'change',
                       'change_abs',
                       'Volatility.D',
                       'Volatility.M',
                       'Volatility.W',
                       'volume',
                       'average_volume_10d_calc',
                       'average_volume_30d_calc',
                       'average_volume_60d_calc',
                       'average_volume_90d_calc',
                       'total_value_traded',
                       'relative_volume_10d_calc',
                       "Candle.AbandonedBaby.Bearish", "Candle.AbandonedBaby.Bullish", "Candle.Engulfing.Bearish",
                       "Candle.Harami.Bearish", "Candle.Engulfing.Bullish", "Candle.Harami.Bullish", "Candle.Doji",
                       "Candle.Doji.Dragonfly", "Candle.EveningStar", "Candle.Doji.Gravestone", "Candle.Hammer",
                       "Candle.HangingMan", "Candle.InvertedHammer", "Candle.Kicking.Bearish", "Candle.Kicking.Bullish",
                       "Candle.LongShadow.Lower", "Candle.LongShadow.Upper", "Candle.Marubozu.Black",
                       "Candle.Marubozu.White", "Candle.MorningStar", "Candle.ShootingStar", "Candle.SpinningTop.Black",
                       "Candle.SpinningTop.White", "Candle.3BlackCrows", "Candle.3WhiteSoldiers",
                       "Candle.TriStar.Bearish",
                       "Candle.TriStar.Bullish"],

    'columns_forex': ['BB.lower',
                      'BB.upper',
                      'close',
                      'Recommend.MA',
                      'SMA20',
                      'SMA50',
                      'SMA200',
                      'Aroon.Down',
                      'Aroon.Up',
                      'low',
                      'DonchCh20.Lower',
                      'DonchCh20.Upper',
                      'CCI20',
                      'Low.All',
                      'ask',
                      'gap',
                      'Recommend.Other',
                      'W.R',
                      'ADR',
                      'ATR',
                      'sector',
                      'high',
                      'Ichimoku.Lead1',
                      'Ichimoku.Lead2',
                      'ADX-DI',
                      'ADX+DI',
                      'RSI7',
                      'RSI',
                      'ADX',
                      'KltChnl.lower',
                      'KltChnl.upper',
                      'Ichimoku.BLine',
                      'Ichimoku.CLine',
                      'AO',
                      'Mom',
                      'EMA5',
                      'EMA10',
                      'EMA20',
                      'EMA30',
                      'EMA50',
                      'EMA100',
                      'EMA200',
                      'HullMA9',
                      'VWMA',
                      'SMA5',
                      'SMA10',
                      'SMA30',
                      'SMA100',
                      'MACD.macd',
                      'Recommend.All',
                      'bid',
                      'UO',
                      'open',
                      'P.SAR',
                      'Perf.Y',
                      'Perf.1M',
                      'Perf.3M',
                      'Perf.6M',
                      'Perf.W',
                      'Perf.YTD',
                      'Pivot.M.Camarilla.Middle',
                      'Pivot.M.Camarilla.R1',
                      'Pivot.M.Camarilla.R2',
                      'Pivot.M.Camarilla.R3',
                      'Pivot.M.Camarilla.S1',
                      'Pivot.M.Camarilla.S2',
                      'Pivot.M.Camarilla.S3',
                      'Pivot.M.Classic.Middle',
                      'Pivot.M.Classic.R1',
                      'Pivot.M.Classic.R2',
                      'Pivot.M.Classic.R3',
                      'Pivot.M.Classic.S1',
                      'Pivot.M.Classic.S2',
                      'Pivot.M.Classic.S3',
                      'Pivot.M.Demark.Middle',
                      'Pivot.M.Demark.R1',
                      'Pivot.M.Demark.S1',
                      'Pivot.M.Fibonacci.Middle',
                      'Pivot.M.Fibonacci.R1',
                      'Pivot.M.Fibonacci.R2',
                      'Pivot.M.Fibonacci.R3',
                      'Pivot.M.Fibonacci.S1',
                      'Pivot.M.Fibonacci.S2',
                      'Pivot.M.Fibonacci.S3',
                      'Pivot.M.Woodie.Middle',
                      'Pivot.M.Woodie.R1',
                      'Pivot.M.Woodie.R2',
                      'Pivot.M.Woodie.R3',
                      'Pivot.M.Woodie.S1',
                      'Pivot.M.Woodie.S2',
                      'Pivot.M.Woodie.S3',
                      'Low.6M',
                      'price_52_week_low',
                      'Low.1M',
                      'Low.3M',
                      'High.6M',
                      'price_52_week_high',
                      'High.1M',
                      'High.3M',
                      'VWAP',
                      'BBPower',
                      'country',
                      'Stoch.RSI.D',
                      'Stoch.RSI.K',
                      'MACD.signal',
                      'High.All',
                      'Stoch.D',
                      'Stoch.K',
                      'ROC',
                      'change',
                      'change_abs',
                      'Volatility.D',
                      'Volatility.M',
                      'Volatility.W',
                      "Candle.AbandonedBaby.Bearish", "Candle.AbandonedBaby.Bullish", "Candle.Engulfing.Bearish",
                      "Candle.Harami.Bearish", "Candle.Engulfing.Bullish", "Candle.Harami.Bullish", "Candle.Doji",
                      "Candle.Doji.Dragonfly", "Candle.EveningStar", "Candle.Doji.Gravestone", "Candle.Hammer",
                      "Candle.HangingMan", "Candle.InvertedHammer", "Candle.Kicking.Bearish", "Candle.Kicking.Bullish",
                      "Candle.LongShadow.Lower", "Candle.LongShadow.Upper", "Candle.Marubozu.Black",
                      "Candle.Marubozu.White",
                      "Candle.MorningStar", "Candle.ShootingStar", "Candle.SpinningTop.Black",
                      "Candle.SpinningTop.White",
                      "Candle.3BlackCrows", "Candle.3WhiteSoldiers", "Candle.TriStar.Bearish",
                      "Candle.TriStar.Bullish"],
}
